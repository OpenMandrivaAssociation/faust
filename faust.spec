%define debug_package %{nil}

Summary:	Faust AUdio Stream (real-time audio signal processing language)
Name:		faust
Version:	0.9.65
Release:	2
License:	GPLv2+ and BSD
Group:		Development/Other
Url:		http://faust.grame.fr/
Source0:	http://downloads.sourceforge.net/faudiostream/%{name}-%{version}.tar.gz
Source1:	faust.rpmlintrc
BuildRequires:	doxygen
BuildRequires:	graphviz
Requires:	glitz
Suggests:	jackit
Suggests:	csound
Suggests:	octave

%description
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. Its programming model combines two approaches : functional
programming and block diagram composition. You can think of FAUST as a
structured block diagram language with a textual syntax.

FAUST is intended for developers who need to develop efficient C/C++ audio
plugins for existing systems or full standalone audio applications. Thanks to
some specific compilation techniques and powerful optimizations, the C++ code
generated by the Faust compiler is usually very fast. It can generally compete
with (and sometimes outperform) hand-written C code.

Programming with FAUST is somehow like working with electronic circuits and
signals. A FAUST program is a list of definitions that defines a signal
processor block-diagram: a piece of code that produces output signals
according to its input signals (and maybe some user interface parameters)

%files
%doc COPYING README examples
%{_bindir}/%{name}
%{_bindir}/%{name}path
%{_bindir}/%{name}optflags
%{_libdir}/%{name}
%{_includedir}/%{name}

#----------------------------------------------------------------------------

%package doc
Summary:	Documentation for %{name}
License:	GPLv2+
Group:		Development/Other
BuildArch:	noarch

%description doc
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. This package provides documentation files to help with
writing programs with faust.

%files doc
%doc documentation/*
%doc dox

#----------------------------------------------------------------------------

%package tools
Summary:	3rd party tools written for %{name}
License:	GPLv2+
Group:		Development/Other
Requires:	%{name} = %{EVRD}

%description tools
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. These additional tools are provided by various contributors
to help the building process of applications and plugins with Faust.

%files tools
%doc tools/README README.supercollider README.appls
%{_bindir}/%{name}2*

#----------------------------------------------------------------------------

%package kate
Summary:	Kate/Kwrite plugin for %{name}
License:	GPLv2+
Group:		Development/Other
Requires:	%{name} = %{EVRD}

%description kate
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. This package provides Faust code syntax highlighting support
for KDE's Kate/Kwrite.

%files kate
%doc syntax-highlighting/README
%{_datadir}/kde4/apps/katepart/syntax/%{name}.xml

#----------------------------------------------------------------------------

%prep
%setup -q
# For installation in the correct location and for preserving timestamps:
# The Makefile normally puts noarch files in $prefix/lib. We change
# this to $prefix/share
# Also don't build the osclib until upstream supports shared libs
#	-e '/osclib/d'				\
sed -i	-e 's|/lib/|/%{_lib}/|g'			\
	-e 's| -r | -pr |'			\
	-e 's| -m | -pm |'			\
	Makefile
sed -i 's|/lib|/%{_lib}|g' compiler/parser/enrobage.cpp
sed -i 's|install |install -pm 755 |' tools/faust2appls/Makefile

iconv -f iso8859-1 -t utf8 examples/README -o tmpfile

%build
%make PREFIX=%{_prefix}

#limit doxy generation to html:
sed -i -e "s/GENERATE_LATEX         = YES/GENERATE_LATEX          = NO/g" compiler/Doxyfile

%make doc PREFIX=%{_prefix}

%install
mkdir -p %{buildroot}%{_bindir}
touch -r examples/README tmpfile
mv -f tmpfile examples/README
make install DESTDIR=%{buildroot} PREFIX=%{_prefix} LIBDIR=%{_libdir} INCLUDEDIR=%{_includedir}

mv documentation/faust-quick-reference-src/illustrations/ documentation
rm -fr documentation/faust-quick-reference-src

cp -a tools/%{name}2sc-*/%{name}2sc %{buildroot}%{_bindir}
mv tools/%{name}2sc-*/README README.supercollider

cp -a tools/%{name}2appls/%{name}2* %{buildroot}%{_bindir}
mv tools/%{name}2appls/README README.appls

mkdir -p %{buildroot}%{_datadir}/kde4/apps/katepart/syntax/
cp -a syntax-highlighting/%{name}.xml \
    %{buildroot}%{_datadir}/kde4/apps/katepart/syntax/

# remove the android lib
rm -fr %{buildroot}%{_libdir}/faust/android/
rm -fr %{buildroot}%{_libdir}/faust/iOS/
rm -fr %{buildroot}%{_libdir}/faust/iPhone/

