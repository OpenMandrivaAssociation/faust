%define name    faust
%define version 0.9.10
%define release %mkrel 4

Name:           %{name}
Version:        %{version}
Release:        %{release}
Summary:        Faust AUdio Stream (real-time audio signal processing language)
Group:          Development/Other
License:        GPLv2+ and BSD
URL:            http://faust.grame.fr/
Source:         http://downloads.sourceforge.net/faudiostream/%{name}-%{version}.tar.gz
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)

BuildRequires:  doxygen
BuildRequires:  graphviz-devel

Requires:       glitz
Suggests:       jackit
Suggests:       csound
Suggests:       octave

%description
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. Its programming model combines two approaches : functional
programming and block diagram composition. You can think of FAUST as a
structured block diagram language with a textual syntax.

FAUST is intended for developers who need to develop efficient C/C++ audio
plugins for existing systems or full standalone audio applications. Thanks to
some specific compilation techniques and powerful optimizations, the C++ code
generated by the Faust compiler is usually very fast. It can generally compete
with (and sometimes outperform) hand-written C code.

Programming with FAUST is somehow like working with electronic circuits and 
signals. A FAUST program is a list of definitions that defines a signal 
processor block-diagram : a piece of code that produces output signals
according to its input signals (and maybe some user interface parameters)

%package doc
Summary:    Documentation for %{name}
Group:      Development/Other
License:    GPLv2+
Requires:   %{name} = %{version}-%{release}

%description doc
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. This package provides documentation files to help with 
writing programs with faust.

%package tools
Summary:    3rd party tools written for %{name}
Group:      Development/Other
License:    GPLv2+
Requires:   %{name} = %{version}-%{release}

%description tools
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. These additional tools are provided by various contributors
to help the building process of applications and plugins with Faust.

%package kate
Summary:    Kate/Kwrite plugin for %{name}
Group:      Development/Other
License:    GPLv2+
Requires:   %{name} = %{version}-%{release}
Requires:   kdesdk

%description kate
Faust AUdio STreams is a functional programming language for real-time audio
signal processing. This package provides Faust code syntax highlighting support
for KDE's Kate/Kwrite.

%prep
%setup -q
iconv -f iso8859-1 -t utf8 examples/README -o tmpfile

%build

%make PREFIX=%{_prefix}

#limit doxy generation to html:
sed -i -e "s/GENERATE_LATEX         = YES/GENERATE_LATEX          = NO/g" compiler/Doxyfile

%make doc PREFIX=%{_prefix}

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}%{_datadir}/doc/faust
mkdir -p %{buildroot}%{_datadir}/compiler/doc
mkdir -p %{buildroot}%{_datadir}/lib/faust
touch -r examples/README tmpfile
mv -f tmpfile examples/README
make install DESTDIR=%{buildroot} PREFIX=%{_prefix}

mv documentation/faust-quick-reference-src/illustrations/ documentation
rm -fr documentation/faust-quick-reference-src

cp -a tools/%{name}2sc-*/%{name}2sc %{buildroot}%{_bindir}
mv tools/%{name}2sc-*/README README.supercollider

cp -a tools/%{name}2appls/%{name}2* %{buildroot}%{_bindir}
mv tools/%{name}2appls/README README.appls

mkdir -p %{buildroot}%{_datadir}/kde4/apps/katepart/syntax/
cp -a syntax-highlighting/%{name}.xml \
    %{buildroot}%{_datadir}/kde4/apps/katepart/syntax/

%clean
rm -rf %{buildroot}

%files
%defattr(-,root,root,-)
%{_prefix}/lib/%{name}
%{_bindir}/%{name}
%doc COPYING README examples

%files doc
%defattr(-,root,root,-)
%doc documentation/* 
%doc dox

%files tools
%defattr(-,root,root,-)
%doc tools/README README.supercollider README.appls tools/%{name}2pd-*
%{_bindir}/%{name}2*

%files kate
%defattr(-,root,root,-)
%doc syntax-highlighting/README
%{_datadir}/kde4/apps/katepart/syntax/%{name}.xml


